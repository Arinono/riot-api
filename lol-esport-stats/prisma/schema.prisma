generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlayerTeam {
  team_id   Int
  player_id Int
  player   players @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team     teams   @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([team_id, player_id])
}

model leagues {
  id                Int           @id @default(autoincrement())
  riot_id           String?       @unique @db.VarChar(50)
  slug              String?       @unique @db.VarChar(50)
  name              String?       @db.VarChar(150)
  region            String?       @db.VarChar(50)
  image_url         String?       @db.VarChar(150)
  priority          Int?
  priority_position Int?
  priority_status   String?       @db.VarChar(50)
  teams             teams[]
  tournaments       tournaments[]
}

model matches {
  id                             Int      @id @default(autoincrement())
  riot_id                        String?  @unique @db.VarChar(50)
  state                          String?  @db.VarChar(50)
  stage_id                       Int
  team_1_id                      Int?
  team_2_id                      Int?
  team_1_win                     Boolean?
  team_2_win                     Boolean?
  stage                          stages   @relation(fields: [stage_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_1                         teams?   @relation("matches_team_1", fields: [team_1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_2                         teams?   @relation("matches_team_2", fields: [team_2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model players {
  id              Int          @id @default(autoincrement())
  riot_id         String?      @unique @db.VarChar(50)
  summoner_name   String?      @db.VarChar(50)
  first_name      String?      @db.VarChar(50)
  last_name       String?      @db.VarChar(50)
  image           String?      @db.VarChar(150)
  role            String?      @db.VarChar(50)
  current_team    teams        @relation(fields: [current_team_id], references: [id])
  current_team_id Int
  teams           PlayerTeam[]
}

model stages {
  id            Int         @id @default(autoincrement())
  slug          String?     @db.VarChar(50)
  name          String?     @db.VarChar(150)
  type          String?     @db.VarChar(50)
  tournament_id Int
  tournament    tournaments @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  matches       matches[]
}

model teams {
  id                               Int          @id @default(autoincrement())
  riot_id                          String?      @unique @db.VarChar(50)
  slug                             String?      @db.VarChar(50)
  code                             String?      @db.VarChar(50)
  name                             String?      @db.VarChar(150)
  image                            String?      @db.VarChar(150)
  alt_image                        String?      @db.VarChar(150)
  bg_image                         String?      @db.VarChar(150)
  status                           String?      @db.VarChar(50)
  league_id                        Int?
  league                           leagues?     @relation(fields: [league_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players                          PlayerTeam[]
  matches_team_1                   matches[]    @relation("matches_team_1")
  matches_team_2                   matches[]    @relation("matches_team_2")
  current_players                  players[]
}

model tournaments {
  id         Int       @id @default(autoincrement())
  riot_id    String?   @unique @db.VarChar(50)
  slug       String?   @unique @db.VarChar(50)
  start_date DateTime? @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  league_id  Int
  league     leagues   @relation(fields: [league_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stages     stages[]
}
